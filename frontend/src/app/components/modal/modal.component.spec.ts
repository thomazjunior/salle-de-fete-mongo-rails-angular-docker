import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule } from '@angular/forms';

import { By } from '@angular/platform-browser';
import { Client } from '../../models/client.model';
import { ClientModalComponent } from './modal.component';

// üêê D√©crire le bloc principal du test pour le composant ClientModalComponent
// Ce bloc englobe tous les tests li√©s au modal
// On s'assure que le composant fonctionne comme attendu dans divers sc√©narios
describe('ClientModalComponent', () => {
  let component: ClientModalComponent;
  let fixture: ComponentFixture<ClientModalComponent>;

  // üêê Initialiser le module de test et cr√©er l'instance du composant
  // Avant chaque test, nous configurons l'environnement et compilons les composants n√©cessaires
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [FormsModule], // Importation du module FormsModule pour g√©rer les formulaires
      declarations: [ClientModalComponent] // D√©claration du composant test√©
    }).compileComponents(); // Compilation des composants avant ex√©cution des tests
  });

  // üêê Cr√©ation du composant avant chaque test pour obtenir une instance propre
  beforeEach(() => {
    fixture = TestBed.createComponent(ClientModalComponent);
    component = fixture.componentInstance;
    fixture.detectChanges(); // D√©clenchement de la d√©tection des changements
  });

  // üêê V√©rifier si le composant est correctement cr√©√©
  it('devrait cr√©er le composant', () => {
    expect(component).toBeTruthy(); // V√©rification que l'instance du composant existe
  });

  // üêê Tester si le modal s'affiche uniquement lorsque isOpen est vrai
  it("devrait afficher le modal lorsque 'isOpen' est true", () => {
    component.isOpen = true; // Activation du modal
    fixture.detectChanges(); // Mise √† jour de l'affichage
    const modalElement = fixture.debugElement.query(By.css('.modal-overlay'));
    expect(modalElement).toBeTruthy(); // V√©rification que l'√©l√©ment modal existe dans le DOM
  });

  // üêê V√©rifier si le titre change en fonction du mode
  it("devrait afficher 'Create New Client' lorsque le mode est 'create'", () => {
    component.mode = 'create'; // Mode cr√©ation
    fixture.detectChanges(); // Mise √† jour de l'affichage
    const title = fixture.debugElement.query(By.css('h3')).nativeElement;
    expect(title.textContent).toContain('Create New Client'); // V√©rification du titre affich√©
  });

  // üêê V√©rifier si le titre change pour 'Edit Client' lorsque le mode est √©dition
  it("devrait afficher 'Edit Client' lorsque le mode est 'edit'", () => {
    component.mode = 'edit'; // Mode √©dition
    fixture.detectChanges(); // Mise √† jour de l'affichage
    const title = fixture.debugElement.query(By.css('h3')).nativeElement;
    expect(title.textContent).toContain('Edit Client'); // V√©rification du titre affich√©
  });

  // üêê Tester si les valeurs du formulaire sont bien li√©es aux propri√©t√©s du client
  it("devrait synchroniser les entr√©es du formulaire avec l'objet client", () => {
    const testClient: Client = {
      name: 'Jean Dupont',
      email: 'jean.dupont@example.com',
      phone_number: '0123456789',
      address: '123 Rue de Paris'
    };
    component.client = testClient; // Attribution des donn√©es du client
    fixture.detectChanges(); // Mise √† jour de l'affichage

    const nameInput = fixture.debugElement.query(By.css('#name')).nativeElement;
    expect(nameInput.value).toBe(testClient.name); // V√©rification de la liaison entre le mod√®le et l'input
  });

  // üêê V√©rifier si l'√©v√©nement onSave est bien d√©clench√© avec les bonnes donn√©es
  it("devrait √©mettre l'√©v√©nement onSave avec le client mis √† jour", () => {
    spyOn(component.onSave, 'emit'); // Espionner l'√©v√©nement onSave
    component.client.name = 'Marie Curie'; // Modifier une valeur du client
    component.saveClient(); // Sauvegarde du client
    expect(component.onSave.emit).toHaveBeenCalledWith(component.client); // V√©rification de l'√©mission correcte de l'√©v√©nement
  });

  // üêê V√©rifier si l'√©v√©nement onClose est bien d√©clench√© lors de la fermeture du modal
  it("devrait √©mettre l'√©v√©nement onClose lorsqu'on ferme le modal", () => {
    spyOn(component.onClose, 'emit'); // Espionner l'√©v√©nement onClose
    component.closeModal(); // Fermeture du modal
    expect(component.onClose.emit).toHaveBeenCalled(); // V√©rification que l'√©v√©nement onClose a bien √©t√© √©mis
  });
});
